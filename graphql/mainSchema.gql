scalar Date

type User {
    id: ID
    name: String
    school: ID
}

type School {
    id: ID
    name: String
    direction: String
    type: String
    studentsQuantity: Int
    logo: String
}

type Student {
    id: ID
    name: String
    lastname: String
    admissionDate: Date
    age: Int
    averageGrade: Float
    direction: String
    school: ID
}

type LoggedResponse {
    token: String
}

input UserInput {
    name: String!
    password: String!
    school: ID!
}

input SchoolInput {
    name: String!
    type: String!
    direction: String
}

input StudentInput {
    name: String!
    lastname: String!
    age: Int!
    admissionDate: Date!
    averageGrade: Float!
    direction: String
}

input StudentUpdateInput {
    name: String
    lastname: String
    age: Int
    admissionDate: Date
    averageGrade: Float
    direction: String
}

input LoginInput {
    username: String!
    password: String!
}

type Query {
    user(id: ID!): User
    school(id: ID!): School
    student(id: ID!): Student
    students: [Student!]!
}


type Mutation {
    login(input: LoginInput!): LoggedResponse
    createStudent(input: StudentInput!): Student
    updateStudent(id: ID!, input: StudentUpdateInput): Student
    deleteStudent(id: ID!): Student
}
